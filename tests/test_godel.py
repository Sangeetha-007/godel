import unittest

import godel


class TestSequenceFunctions(unittest.TestCase):
  """
  The numbers used in the assertions were arrived at by running the program,
  and so may not be correct.  The tests should be used to alert when the values
  returned by the encoding and decoding methods change.
  The only exception to this is for the expression encode("0=0") = 243000000,
  as it is given in the text.
  """

  def test_encode_null(self):
    gnum = godel.encode(None)
    self.assertEqual(gnum, 0)

  def test_encode_empty(self):
    gnum = godel.encode("")
    self.assertEqual(gnum, 0)

  def test_encode_nonsense(self):
    with self.assertRaises(godel.LexicalException):
      godel.encode("ljbflajfbwl;jrfn2o4prjflamc;'")

  def test_encode_valid(self):
    gnum = godel.encode("0=0")
    self.assertEqual(gnum, 243000000)

  def test_encode_valid_with_numerical(self):
    gnum = godel.encode('(∃x)(x=sy)')
    self.assertEqual(gnum, 172225505803959398742621651659678877886965404082311908389214945877004912002249920215937500000000)

  def test_encode_valid_with_sentential(self):
    gnum = godel.encode('p∨q⊃r')
    self.assertEqual(gnum, 203561898171301520461293128904030840869441064083870203249484401835393120442435135236243537194884431021403980039408201825442655570801031156951559106411269835668374392155217819824630209743809431410660779069090002354070319001273405435873452153577424497305202126063374297425385371562181296211807067792066327865753801077567990197874183594837245690677031827158113943355984314463090839545668301089292534592029359374863614320422993200776495825721212895587086677551269531250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)

  def test_decode_valid(self):
    string = godel.decode(243000000)
    self.assertEqual(string, "0=0")

  def test_decode_null(self):
    string = godel.decode(None)
    self.assertEqual(string, "")

  def test_decode_empty(self):
    string = godel.decode("")
    self.assertEqual(string, "")

  def test_decode_valid(self):
    string = godel.decode(243000000)
    self.assertEqual(string, "0=0")

  def test_decode_valid_with_numerical(self):
    string = godel.decode(172225505803959398742621651659678877886965404082311908389214945877004912002249920215937500000000)
    self.assertEqual(string, '(∃x)(x=sy)')

  def test_decode_valid_with_sentential(self):
    string = godel.decode(203561898171301520461293128904030840869441064083870203249484401835393120442435135236243537194884431021403980039408201825442655570801031156951559106411269835668374392155217819824630209743809431410660779069090002354070319001273405435873452153577424497305202126063374297425385371562181296211807067792066327865753801077567990197874183594837245690677031827158113943355984314463090839545668301089292534592029359374863614320422993200776495825721212895587086677551269531250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
    self.assertEqual(string, 'p∨q⊃r')


if __name__ == '__main__':
  unittest.main()
